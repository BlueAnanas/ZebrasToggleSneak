buildscript {
    repositories {
    	mavenLocal()  // added to find the pached ForgeGradle jar - don't forget to do install after building it locally
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

compileJava.options.encoding = 'UTF-8'

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

ext.set("revision", getBuildNo())

group = config.group_name
version = config.mod_version + "." + revision
archivesBaseName = "${config.mod_id}-${config.minecraft_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version + "-" + config.minecraft_version // grab latest forge
	if (file('../multiProjectDir').exists()) {
		assetDir = "../multiProjectDir/assets"
	} else {
		assetDir = "eclipse/assets"
	}
    replace '@MOD_ID@', config.mod_id
    replace '@MOD_NAME@', config.mod_name
    replace '@MOD_VERSION@', config.mod_version
    replace '@MINECRAFT_VERSION@', config.minecraft_version
}

repositories {
    mavenLocal()  // install the com.mumfrey:liteloader:1.8-SNAPSHOT-mcpnames jar manually in local repo
}                 // mvn install:install-file -Dfile={local jar file} -DgroupId=com.mumfrey -DartifactId=liteloader -Dversion=1.8-SNAPSHOT-mcpnames -Dpackaging=jar
dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // force replacements if input changes
    inputs.property "version", config.mod_version
    inputs.property "mcversion", config.minecraft_version
	inputs.property "revision", project.revision
    inputs.property "forgeversion", config.forge_version
    
    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'
        include '**/*.json'

        // replaces
        expand ([
            'mod_version': config.mod_version,
            'mod_revision': config.mod_build,
            'forge_version': config.forge_version,
            'minecraft_version': config.minecraft_version,
            'mod_id': config.mod_id,
            'mod_name': config.mod_name,
        ])
    }

    // copy everything else that we didn't do before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
        exclude '**/*.json'
    }
}

jar {
    from('src/main/java') { include 'assets/**' }
	exclude 'eu/sajuk/tsdev/zebrastogglesneak/LiteModZebrasToggleSneak.class', 'litemod.json'
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    appendix = 'src'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}
String getBuildNo(){
	return git("rev-list", "HEAD", "--count")
}
import static net.minecraftforge.gradle.dev.DevBasePlugin.*
String git(String[] args){
	try{
		return runGit(project, project.getProjectDir(), args)
	}catch(Exception e){
		return null
	}
}

apply plugin: 'liteloader'  /// should work
jarLiteloader{
    from('src/main/java') { include 'assets/**' }
//	appendix = 'liteloader'
	exclude 'eu/sajuk/tsdev/zebrastogglesneak/FMLZebrasToggleSneak.class', 'mcmod.info'
}
